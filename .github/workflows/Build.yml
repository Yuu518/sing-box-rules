name: Build rules files
on:
  workflow_dispatch:
  schedule:
    - cron: "0 23 * * *"
  push:
    branches:
      - master
    paths-ignore:
      - "**/README.md"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "RELEASE_NAME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "SING_VERSION=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases | perl -ne 'if(/"tag_name":\s*"v([0-9a-zA-Z\.-]+)"/){ print "$1\n"; last }')" >> $GITHUB_ENV
          echo "CHINA_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/accelerated-domains.china.conf" >> $GITHUB_ENV
          echo "GOOGLE_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/google.china.conf" >> $GITHUB_ENV
          echo "APPLE_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/apple.china.conf" >> $GITHUB_ENV
          echo "GLOBALMEDIA_URL=https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/GlobalMedia/GlobalMedia_Domain.txt" >> $GITHUB_ENV
          echo "CATS_TEAM_ADRULES=https://raw.githubusercontent.com/Cats-Team/AdRules/main/mosdns_adrules.txt" >> $GITHUB_ENV
          echo "CATS_TEAM_ADRULES_ADGUARD=https://adrules.top/dns.txt" >> $GITHUB_ENV
          echo "AWAVENUE_ADS_RULES_URL=https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Mosdns_v5.txt" >> $GITHUB_ENV
          echo "AWAVENUE_ADS_RULES_URL_ADGUARD=https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Adguard.txt" >> $GITHUB_ENV
          echo "CUSTOM_DIRECT=https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/cn.txt" >> $GITHUB_ENV
          echo "CUSTOM_PROXY=https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/geolocation-!cn.txt" >> $GITHUB_ENV
          echo "CUSTOM_GFWLIST=https://raw.githubusercontent.com/pexcn/daily/gh-pages/gfwlist/gfwlist.txt" >> $GITHUB_ENV
        shell: bash

      - name: Checkout the "src" branch of this repo
        uses: actions/checkout@v4.1.7
        with:
          ref: src

      - name: Checkout Loyalsoldier/domain-list-custom
        uses: actions/checkout@v4.1.7
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom

      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v4.1.7
        with:
          repository: v2fly/domain-list-community
          path: community

      - name: Supplement domain-list-community
        uses: actions/checkout@v4.1.7
        with:
          repository: Yuu518/Yuu-config
          path: yuuconfig

      - name: Checkout converter
        uses: actions/checkout@v4.1.7
        with:
          repository: Yuu518/meta-rules-converter
          path: convert

      - name: Checkout cokebar/gfwlist2dnsmasq
        uses: actions/checkout@v4.1.7
        with:
          repository: cokebar/gfwlist2dnsmasq
          path: gfwlist2dnsmasq

      - name: get latest go version
        id: go_latest
        run: |
          echo go_latest=$(curl -s https://raw.githubusercontent.com/actions/go-versions/update-versions-manifest-file/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g') >> $GITHUB_OUTPUT

      - name: setup go
        uses: actions/setup-go@v5.0.2
        with:
          go-version: ${{steps.go_latest.outputs.go_latest}}
          cache-dependency-path: ./custom/go.sum

      - name: Get geoip.dat relative files
        run: |
          wget https://github.com/Yuu518/geoip/raw/release/geoip.dat
          wget https://github.com/Yuu518/geoip/raw/release/geoip.dat.sha256sum

      - name: Generate GFWList domains
        run: |
          cd gfwlist2dnsmasq || exit 1
          chmod +x ./gfwlist2dnsmasq.sh
          ./gfwlist2dnsmasq.sh -l -o ./temp-gfwlist.txt
          
      - name: Get and add direct domains into temp-direct.txt file
        run: |
          curl -sSL $CHINA_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' > temp-direct.txt
          curl -sSL $CUSTOM_DIRECT | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' >> temp-direct.txt
          
      - name: Get and add proxy domains into temp-proxy.txt file
        run: |
          cat ./gfwlist2dnsmasq/temp-gfwlist.txt | perl -ne '/^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/ && print "$1\n"' > temp-proxy.txt
          curl -L $GOOGLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' >> temp-proxy.txt
          curl -L $APPLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' >> temp-proxy.txt
          curl -L $CUSTOM_PROXY | grep -Ev ":@cn" | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' >> temp-proxy.txt
          curl -L $CUSTOM_GFWLIST | perl -ne '/^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/ && print "$1\n"' >> temp-proxy.txt
          
      - name: Get and add reject domains file
        run: |
          curl -sSL $CATS_TEAM_ADRULES | sed 's/domain://g' >> temp-reject.txt
          curl -sSL $AWAVENUE_ADS_RULES_URL | sed 's/domain://g' >> temp-reject.txt
          curl -sSL $CATS_TEAM_ADRULES_ADGUARD | sed '1,8d' >> temp-reject-adguard.txt
          curl -sSL $AWAVENUE_ADS_RULES_URL_ADGUARD | sed '1,9d' >> temp-reject-adguard.txt
          
      - name: Reserve `full`, `regexp` and `keyword` type of rules from custom lists to "reserve" files
        run: |
          curl -sSL $CUSTOM_DIRECT | perl -ne '/^((full|regexp|keyword):[^:]+)(\n$|:@.+)/ && print "$1\n"' | sort --ignore-case -u > direct-reserve.txt
          curl -sSL $CUSTOM_PROXY | grep -Ev ":@cn" | perl -ne '/^((full|regexp|keyword):[^:]+)(\n$|:@.+)/ && print "$1\n"' | sort --ignore-case -u > proxy-reserve.txt
          
      - name: Add proxy, direct and reject domains from "src" branch to appropriate temp files
        run: |
          cat proxy.txt >> temp-proxy.txt
          cat direct.txt >> temp-direct.txt
          cat reject.txt >> temp-reject.txt
          
      - name: Sort and generate redundant lists
        run: |
          cat temp-proxy.txt | sort --ignore-case -u > proxy-list-with-redundant
          cat temp-direct.txt | sort --ignore-case -u > direct-list-with-redundant
          cat temp-reject.txt | sort --ignore-case -u > reject-list-without-redundant
          cat temp-reject-adguard.txt | sort --ignore-case -u > reject-list-without-redundant-adguard
          
      - name: Remove redundant domains
        run: |
          chmod +x findRedundantDomain.py
          ./findRedundantDomain.py ./direct-list-with-redundant ./direct-list-deleted-unsort
          ./findRedundantDomain.py ./proxy-list-with-redundant ./proxy-list-deleted-unsort
          [ ! -f "direct-list-deleted-unsort" ] && touch direct-list-deleted-unsort
          [ ! -f "proxy-list-deleted-unsort" ] && touch proxy-list-deleted-unsort
          sort ./direct-list-deleted-unsort > ./direct-list-deleted-sort
          sort ./proxy-list-deleted-unsort > ./proxy-list-deleted-sort
          diff ./direct-list-deleted-sort ./direct-list-with-redundant | awk '/^>/{print $2}' > ./direct-list-without-redundant
          diff ./proxy-list-deleted-sort ./proxy-list-with-redundant | awk '/^>/{print $2}' > ./proxy-list-without-redundant
          
      - name: Remove domains from "need-to-remove" lists in "src" branch
        run: |
          python ./removefrom.py -remove ./direct-need-to-remove.txt -from ./direct-list-without-redundant -out ./temp-cn.txt
          python ./removefrom.py -remove ./proxy-need-to-remove.txt -from ./proxy-list-without-redundant -out ./temp-geolocation-\!cn.txt
          python ./removefrom.py -remove ./reject-need-to-remove.txt -from ./reject-list-without-redundant -out ./temp-category-ads-all.txt
          python ./removefrom.py -remove ./reject-need-to-remove-adguard.txt -from ./reject-list-without-redundant-adguard -out ./temp-category-ads-all-adguard.txt
          
      - name: Remove domains end with ".cn" in "temp-geolocation-!cn.txt" and write lists to data directory
        run: |
          cat temp-cn.txt | sort --ignore-case -u | perl -ne '/^((?=^.{1,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})*)/ && print "$1\n"' > ./community/data/cn
          cat temp-cn.txt | sort --ignore-case -u | perl -ne 'print if not /^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/' > direct-tld-list.txt
          cat temp-geolocation-\!cn.txt | sort --ignore-case -u | perl -ne '/^((?=^.{1,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})*)/ && print "$1\n"' | perl -ne 'print if not /\.cn$/' > ./community/data/geolocation-\!cn
          cat temp-geolocation-\!cn.txt | sort --ignore-case -u | perl -ne 'print if not /^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/' > proxy-tld-list.txt
          cat temp-category-ads-all.txt > ./community/data/category-ads-all
          cat temp-category-ads-all.txt | perl -ne 'print if not /^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/' > reject-tld-list.txt
          cat temp-category-ads-all-adguard.txt > reject-list-adguard.txt
          
      - name: Add `full`, `regexp` and `keyword` type of rules back into "cn", "geolocation-!cn" and "category-ads-all" list
        run: |
          [ -f "direct-reserve.txt" ] && cat direct-reserve.txt >> ./community/data/cn
          [ -f "proxy-reserve.txt" ] && cat proxy-reserve.txt >> ./community/data/geolocation-\!cn
          cp ./community/data/cn direct-list.txt
          cp ./community/data/geolocation-\!cn proxy-list.txt
          cat ./community/data/category-ads-all | sed '/^regexp:/d' > reject-list.txt
          awk '{print "0.0.0.0 " $0}' reject-list.txt > hosts
          
      - name: Create `china-list`、`google-cn`、`apple-cn`、`gfw` lists
        run: |
          curl -sSL $CHINA_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' > ./community/data/china-list
          curl -sSL $CHINA_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' > china-list.txt
          curl -sSL $GOOGLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "full:$1\n"' > ./community/data/google-cn
          curl -sSL $GOOGLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "full:$1\n"' > google-cn.txt
          curl -sSL $APPLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "full:$1\n"' > ./community/data/apple-cn
          curl -sSL $APPLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "full:$1\n"' > apple-cn.txt
          cat ./gfwlist2dnsmasq/temp-gfwlist.txt | perl -ne '/^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/ && print "$1\n"' >> ./community/data/gfw
          cat ./community/data/gfw | sort --ignore-case -u > gfw.txt
      
      - name: Add Custome Rule
        run: |
          curl -sSL $GLOBALMEDIA_URL | sed '/^\s*#/d' | sed '/^[^\.]/ s/^/full:/' |  sed 's/^\.\([^.]*\)/\1/' > ./community/data/globalmedia
          cp -f ./yuuconfig/domain-list-custom/* ./community/data
          
      - name: Build geosite.dat file
        run: |
          cd custom || exit 1
          go run ./ --datapath=../community/data
          sha256sum publish/geosite.dat > publish/geosite.dat.sha256sum
          
      - name: Convert geo to sing-rule-set
        env:
          NO_SKIP: true
        run: |
          mkdir -p rule_set/rule_set_site && mkdir -p sing-rule/rule_set_ip
          cd convert
          go run ./ geosite -f ../custom/publish/geosite.dat -o ../rule_set/rule_set_site -t sing-box
          go run ./ geoip -f ../geoip.dat -o ../rule_set/rule_set_ip -t sing-box

      - name: Add AdGuard DNS Filter
        run: |
          mkdir -p ./adguard
          cd ./adguard
          wget https://github.com/SagerNet/sing-box/releases/download/v"${SING_VERSION}"/sing-box-"${SING_VERSION}"-linux-amd64.tar.gz -O sing-box.tar.gz &&
          tar zxvf sing-box.tar.gz &&
          mv sing-box-"${SING_VERSION}"-linux-amd64/sing-box ./
          chmod 755 sing-box
          ./sing-box rule-set convert -t adguard --output category-ads-all-adguard.srs ../reject-list-adguard.txt
          ./sing-box rule-set convert -t adguard ../yuuconfig/adguard-filters-custom/*.txt
          mv *.srs ../rule_set/rule_set_site
          mv ../yuuconfig/adguard-filters-custom/*.srs ../rule_set/rule_set_site

      - name: Move files
        run: |
          install -Dp ./geoip.dat ./publish/geoip.dat
          install -Dp ./geoip.dat.sha256sum ./publish/geoip.dat.sha256sum
          install -Dp ./custom/publish/geosite.dat ./publish/geosite.dat
          install -Dp ./custom/publish/geosite.dat.sha256sum ./publish/geosite.dat.sha256sum
          install -p {proxy,direct,reject}-tld-list.txt ./publish/
          install -p {proxy,direct,reject}-list.txt ./publish/
          install -p {china-list,apple-cn,google-cn,gfw}.txt ./publish/
          install -p hosts ./publish/hosts
          install -p reject-list-adguard.txt ./publish/
          install -p ./yuuconfig/adguard-filters-custom/*.txt ./publish/
          
      - name: Git push assets to "release" branch
        run: |
          cd publish || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "Released on ${RELEASE_NAME}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Git push assets to "rule_set" branch
        run: |
            cd rule_set || exit 1
            ls
            git init
            git config --local user.name "github-actions[bot]"
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git checkout -b rule_set
            git add .
            git commit -m "Released on ${RELEASE_NAME}"
            git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
            git push -f -u origin rule_set

      - name: Delete Workflow Runs
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 1
